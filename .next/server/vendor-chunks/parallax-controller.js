"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/parallax-controller";
exports.ids = ["vendor-chunks/parallax-controller"];
exports.modules = {

/***/ "(ssr)/./node_modules/parallax-controller/dist/parallax-controller.esm.js":
/*!**************************************************************************!*\
  !*** ./node_modules/parallax-controller/dist/parallax-controller.esm.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EasingPreset: () => (/* binding */ EasingPreset),\n/* harmony export */   Element: () => (/* binding */ Element),\n/* harmony export */   Limits: () => (/* binding */ Limits),\n/* harmony export */   ParallaxController: () => (/* binding */ ParallaxController),\n/* harmony export */   Rect: () => (/* binding */ Rect),\n/* harmony export */   RotationUnits: () => (/* binding */ RotationUnits),\n/* harmony export */   ScaleUnits: () => (/* binding */ ScaleUnits),\n/* harmony export */   Scroll: () => (/* binding */ Scroll),\n/* harmony export */   ScrollAxis: () => (/* binding */ ScrollAxis),\n/* harmony export */   Units: () => (/* binding */ Units),\n/* harmony export */   ValidCSSEffects: () => (/* binding */ ValidCSSEffects),\n/* harmony export */   View: () => (/* binding */ View),\n/* harmony export */   createId: () => (/* binding */ createId),\n/* harmony export */   getProgressAmount: () => (/* binding */ getProgressAmount),\n/* harmony export */   isElementInView: () => (/* binding */ isElementInView),\n/* harmony export */   parseElementTransitionEffects: () => (/* binding */ parseElementTransitionEffects),\n/* harmony export */   parseValueAndUnit: () => (/* binding */ parseValueAndUnit),\n/* harmony export */   resetStyles: () => (/* binding */ resetStyles),\n/* harmony export */   scaleBetween: () => (/* binding */ scaleBetween),\n/* harmony export */   scaleEffectByProgress: () => (/* binding */ scaleEffectByProgress),\n/* harmony export */   setElementStyles: () => (/* binding */ setElementStyles),\n/* harmony export */   testForPassiveScroll: () => (/* binding */ testForPassiveScroll)\n/* harmony export */ });\n/* harmony import */ var bezier_easing__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bezier-easing */ \"(ssr)/./node_modules/bezier-easing/src/index.js\");\n/* harmony import */ var bezier_easing__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bezier_easing__WEBPACK_IMPORTED_MODULE_0__);\n\nvar Limits = function Limits(properties) {\n    this.startX = properties.startX;\n    this.startY = properties.startY;\n    this.endX = properties.endX;\n    this.endY = properties.endY; // Used to calculate the progress of the element\n    this.totalX = this.endX - this.startX;\n    this.totalY = this.endY - this.startY; // Used to scale translate effects\n    this.startMultiplierX = properties.startMultiplierX || 1;\n    this.endMultiplierX = properties.endMultiplierX || 1;\n    this.startMultiplierY = properties.startMultiplierY || 1;\n    this.endMultiplierY = properties.endMultiplierY || 1;\n};\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nvar ValidCSSEffects;\n(function(ValidCSSEffects) {\n    ValidCSSEffects[\"speed\"] = \"speed\";\n    ValidCSSEffects[\"translateX\"] = \"translateX\";\n    ValidCSSEffects[\"translateY\"] = \"translateY\";\n    ValidCSSEffects[\"rotate\"] = \"rotate\";\n    ValidCSSEffects[\"rotateX\"] = \"rotateX\";\n    ValidCSSEffects[\"rotateY\"] = \"rotateY\";\n    ValidCSSEffects[\"rotateZ\"] = \"rotateZ\";\n    ValidCSSEffects[\"scale\"] = \"scale\";\n    ValidCSSEffects[\"scaleX\"] = \"scaleX\";\n    ValidCSSEffects[\"scaleY\"] = \"scaleY\";\n    ValidCSSEffects[\"scaleZ\"] = \"scaleZ\";\n    ValidCSSEffects[\"opacity\"] = \"opacity\";\n})(ValidCSSEffects || (ValidCSSEffects = {}));\nvar Units;\n(function(Units) {\n    Units[\"px\"] = \"px\";\n    Units[\"%\"] = \"%\";\n    Units[\"vh\"] = \"vh\";\n    Units[\"vw\"] = \"vw\";\n})(Units || (Units = {}));\nvar RotationUnits;\n(function(RotationUnits) {\n    RotationUnits[\"deg\"] = \"deg\";\n    RotationUnits[\"turn\"] = \"turn\";\n    RotationUnits[\"rad\"] = \"rad\";\n})(RotationUnits || (RotationUnits = {}));\nvar ScaleUnits;\n(function(ScaleUnits) {\n    ScaleUnits[\"\"] = \"\";\n})(ScaleUnits || (ScaleUnits = {}));\nvar ScrollAxis;\n(function(ScrollAxis) {\n    ScrollAxis[\"vertical\"] = \"vertical\";\n    ScrollAxis[\"horizontal\"] = \"horizontal\";\n})(ScrollAxis || (ScrollAxis = {}));\nvar EasingPreset;\n(function(EasingPreset) {\n    EasingPreset[\"ease\"] = \"ease\";\n    EasingPreset[\"easeIn\"] = \"easeIn\";\n    EasingPreset[\"easeOut\"] = \"easeOut\";\n    EasingPreset[\"easeInOut\"] = \"easeInOut\";\n    EasingPreset[\"easeInQuad\"] = \"easeInQuad\";\n    EasingPreset[\"easeInCubic\"] = \"easeInCubic\";\n    EasingPreset[\"easeInQuart\"] = \"easeInQuart\";\n    EasingPreset[\"easeInQuint\"] = \"easeInQuint\";\n    EasingPreset[\"easeInSine\"] = \"easeInSine\";\n    EasingPreset[\"easeInExpo\"] = \"easeInExpo\";\n    EasingPreset[\"easeInCirc\"] = \"easeInCirc\";\n    EasingPreset[\"easeOutQuad\"] = \"easeOutQuad\";\n    EasingPreset[\"easeOutCubic\"] = \"easeOutCubic\";\n    EasingPreset[\"easeOutQuart\"] = \"easeOutQuart\";\n    EasingPreset[\"easeOutQuint\"] = \"easeOutQuint\";\n    EasingPreset[\"easeOutSine\"] = \"easeOutSine\";\n    EasingPreset[\"easeOutExpo\"] = \"easeOutExpo\";\n    EasingPreset[\"easeOutCirc\"] = \"easeOutCirc\";\n    EasingPreset[\"easeInOutQuad\"] = \"easeInOutQuad\";\n    EasingPreset[\"easeInOutCubic\"] = \"easeInOutCubic\";\n    EasingPreset[\"easeInOutQuart\"] = \"easeInOutQuart\";\n    EasingPreset[\"easeInOutQuint\"] = \"easeInOutQuint\";\n    EasingPreset[\"easeInOutSine\"] = \"easeInOutSine\";\n    EasingPreset[\"easeInOutExpo\"] = \"easeInOutExpo\";\n    EasingPreset[\"easeInOutCirc\"] = \"easeInOutCirc\";\n    EasingPreset[\"easeInBack\"] = \"easeInBack\";\n    EasingPreset[\"easeOutBack\"] = \"easeOutBack\";\n    EasingPreset[\"easeInOutBack\"] = \"easeInOutBack\";\n})(EasingPreset || (EasingPreset = {}));\n/**\r\n * Creates a unique id to distinguish parallax elements.\r\n */ var id = 0;\nfunction createId() {\n    ++id;\n    return id;\n}\nvar Rect = /*#__PURE__*/ function() {\n    function Rect(options) {\n        var rect = options.el.getBoundingClientRect(); // rect is based on viewport -- must adjust for relative scroll container\n        if (options.view.scrollContainer) {\n            var scrollRect = options.view.scrollContainer.getBoundingClientRect();\n            rect = _extends({}, rect, {\n                top: rect.top - scrollRect.top,\n                right: rect.right - scrollRect.left,\n                bottom: rect.bottom - scrollRect.top,\n                left: rect.left - scrollRect.left\n            });\n        }\n        this.height = options.el.offsetHeight;\n        this.width = options.el.offsetWidth;\n        this.left = rect.left;\n        this.right = rect.right;\n        this.top = rect.top;\n        this.bottom = rect.bottom;\n        if (options.rootMargin) {\n            this._setRectWithRootMargin(options.rootMargin);\n        }\n    }\n    /**\r\n   * Apply root margin to all properties\r\n   */ var _proto = Rect.prototype;\n    _proto._setRectWithRootMargin = function _setRectWithRootMargin(rootMargin) {\n        var totalRootY = rootMargin.top + rootMargin.bottom;\n        var totalRootX = rootMargin.left + rootMargin.right;\n        this.top -= rootMargin.top;\n        this.right += rootMargin.right;\n        this.bottom += rootMargin.bottom;\n        this.left -= rootMargin.left;\n        this.height += totalRootY;\n        this.width += totalRootX;\n    };\n    return Rect;\n}();\nvar VALID_UNITS = [\n    ScaleUnits[\"\"],\n    Units.px,\n    Units[\"%\"],\n    Units[\"vh\"],\n    Units[\"vw\"],\n    RotationUnits.deg,\n    RotationUnits.turn,\n    RotationUnits.rad\n];\n/**\r\n * Determines the unit of a string and parses the value\r\n */ function parseValueAndUnit(str, defaultUnit) {\n    if (defaultUnit === void 0) {\n        defaultUnit = Units[\"%\"];\n    }\n    var out = {\n        value: 0,\n        unit: defaultUnit\n    };\n    if (typeof str === \"undefined\") return out;\n    var isValid = typeof str === \"number\" || typeof str === \"string\";\n    if (!isValid) {\n        throw new Error(\"Invalid value provided. Must provide a value as a string or number\");\n    }\n    str = String(str);\n    out.value = parseFloat(str); // @ts-ignore\n    out.unit = str.match(/[\\d.\\-+]*\\s*(.*)/)[1] || defaultUnit; // @ts-expect-error\n    var isValidUnit = VALID_UNITS.includes(out.unit);\n    if (!isValidUnit) {\n        throw new Error(\"Invalid unit provided.\");\n    }\n    return out;\n}\nvar easingPresets = {\n    ease: [\n        0.25,\n        0.1,\n        0.25,\n        1.0\n    ],\n    easeIn: [\n        0.42,\n        0.0,\n        1.0,\n        1.0\n    ],\n    easeOut: [\n        0.0,\n        0.0,\n        0.58,\n        1.0\n    ],\n    easeInOut: [\n        0.42,\n        0.0,\n        0.58,\n        1.0\n    ],\n    /* Ease IN curves */ easeInQuad: [\n        0.55,\n        0.085,\n        0.68,\n        0.53\n    ],\n    easeInCubic: [\n        0.55,\n        0.055,\n        0.675,\n        0.19\n    ],\n    easeInQuart: [\n        0.895,\n        0.03,\n        0.685,\n        0.22\n    ],\n    easeInQuint: [\n        0.755,\n        0.05,\n        0.855,\n        0.06\n    ],\n    easeInSine: [\n        0.47,\n        0.0,\n        0.745,\n        0.715\n    ],\n    easeInExpo: [\n        0.95,\n        0.05,\n        0.795,\n        0.035\n    ],\n    easeInCirc: [\n        0.6,\n        0.04,\n        0.98,\n        0.335\n    ],\n    /* Ease Out Curves */ easeOutQuad: [\n        0.25,\n        0.46,\n        0.45,\n        0.94\n    ],\n    easeOutCubic: [\n        0.215,\n        0.61,\n        0.355,\n        1.0\n    ],\n    easeOutQuart: [\n        0.165,\n        0.84,\n        0.44,\n        1.0\n    ],\n    easeOutQuint: [\n        0.23,\n        1.0,\n        0.32,\n        1.0\n    ],\n    easeOutSine: [\n        0.39,\n        0.575,\n        0.565,\n        1.0\n    ],\n    easeOutExpo: [\n        0.19,\n        1.0,\n        0.22,\n        1.0\n    ],\n    easeOutCirc: [\n        0.075,\n        0.82,\n        0.165,\n        1.0\n    ],\n    /* Ease IN Out Curves */ easeInOutQuad: [\n        0.455,\n        0.03,\n        0.515,\n        0.955\n    ],\n    easeInOutCubic: [\n        0.645,\n        0.045,\n        0.355,\n        1.0\n    ],\n    easeInOutQuart: [\n        0.77,\n        0.0,\n        0.175,\n        1.0\n    ],\n    easeInOutQuint: [\n        0.86,\n        0.0,\n        0.07,\n        1.0\n    ],\n    easeInOutSine: [\n        0.445,\n        0.05,\n        0.55,\n        0.95\n    ],\n    easeInOutExpo: [\n        1.0,\n        0.0,\n        0.0,\n        1.0\n    ],\n    easeInOutCirc: [\n        0.785,\n        0.135,\n        0.15,\n        0.86\n    ],\n    /* Ease Bounce Curves */ easeInBack: [\n        0.6,\n        -0.28,\n        0.735,\n        0.045\n    ],\n    easeOutBack: [\n        0.175,\n        0.885,\n        0.32,\n        1.275\n    ],\n    easeInOutBack: [\n        0.68,\n        -0.55,\n        0.265,\n        1.55\n    ]\n};\nfunction createEasingFunction(easing) {\n    if (Array.isArray(easing)) {\n        return bezier_easing__WEBPACK_IMPORTED_MODULE_0___default()(easing[0], easing[1], easing[2], easing[3]);\n    }\n    if (typeof easing === \"string\" && typeof easingPresets[easing] !== \"undefined\") {\n        var params = easingPresets[easing];\n        return bezier_easing__WEBPACK_IMPORTED_MODULE_0___default()(params[0], params[1], params[2], params[3]);\n    }\n    return;\n}\nvar PARALLAX_EFFECTS = /*#__PURE__*/ Object.values(ValidCSSEffects);\nvar MAP_EFFECT_TO_DEFAULT_UNIT = {\n    speed: \"px\",\n    translateX: \"%\",\n    translateY: \"%\",\n    rotate: \"deg\",\n    rotateX: \"deg\",\n    rotateY: \"deg\",\n    rotateZ: \"deg\",\n    scale: \"\",\n    scaleX: \"\",\n    scaleY: \"\",\n    scaleZ: \"\",\n    opacity: \"\"\n};\n/**\r\n * Takes a parallax element effects and parses the properties to get the start and end values and units.\r\n */ function parseElementTransitionEffects(props, scrollAxis) {\n    var parsedEffects = {};\n    PARALLAX_EFFECTS.forEach(function(key) {\n        var defaultValue = MAP_EFFECT_TO_DEFAULT_UNIT[key]; // If the provided type is a number, this must be the speed prop\n        // in which case we need to construct the proper translate config\n        if (typeof (props == null ? void 0 : props[key]) === \"number\") {\n            var value = props == null ? void 0 : props[key];\n            var startSpeed = (value || 0) * 10 + \"px\";\n            var endSpeed = (value || 0) * -10 + \"px\";\n            var startParsed = parseValueAndUnit(startSpeed);\n            var endParsed = parseValueAndUnit(endSpeed);\n            var speedConfig = {\n                start: startParsed.value,\n                end: endParsed.value,\n                unit: startParsed.unit\n            }; // Manually set translate y value\n            if (scrollAxis === ScrollAxis.vertical) {\n                parsedEffects.translateY = speedConfig;\n            } // Manually set translate y value\n            if (scrollAxis === ScrollAxis.horizontal) {\n                parsedEffects.translateX = speedConfig;\n            }\n        } // The rest are standard effect being parsed\n        if (Array.isArray(props == null ? void 0 : props[key])) {\n            var _value = props == null ? void 0 : props[key];\n            if (typeof _value[0] !== \"undefined\" && typeof _value[1] !== \"undefined\") {\n                var _startParsed = parseValueAndUnit(_value == null ? void 0 : _value[0], defaultValue);\n                var _endParsed = parseValueAndUnit(_value == null ? void 0 : _value[1], defaultValue);\n                var easing = createEasingFunction(_value == null ? void 0 : _value[2]);\n                parsedEffects[key] = {\n                    start: _startParsed.value,\n                    end: _endParsed.value,\n                    unit: _startParsed.unit,\n                    easing: easing\n                };\n                if (_startParsed.unit !== _endParsed.unit) {\n                    throw new Error(\"Must provide matching units for the min and max offset values of each axis.\");\n                }\n            }\n        }\n    });\n    return parsedEffects;\n}\n/**\r\n * Returns the percent (0 - 100) moved based on position in the viewport\r\n */ function getProgressAmount(/*\r\n * The start value from cache\r\n */ start, /*\r\n * total dist the element has to move to be 100% complete (view width/height + element width/height)\r\n */ totalDist, /*\r\n * Current scroll value\r\n */ currentScroll, /*\r\n * an optional easing function to apply\r\n */ easing) {\n    // adjust cached value\n    var startAdjustedScroll = currentScroll - start; // Amount the element has moved based on current and total distance to move\n    var amount = startAdjustedScroll / totalDist; // Apply bezier easing if provided\n    if (easing) {\n        amount = easing(amount);\n    }\n    return amount;\n}\n/**\r\n * Takes two values (start, end) and returns whether the current scroll is within range\r\n * @param {number} start - start of scroll (x/y)\r\n * @param {number} end - end of scroll (x/y)\r\n * @param {number} scroll - current scroll (x/y)\r\n * @return {boolean} isInView\r\n */ function isElementInView(start, end, scroll) {\n    var isInView = scroll >= start && scroll <= end;\n    return isInView;\n}\n// Scale between AKA normalize\nfunction scaleBetween(value, newMin, newMax, oldMin, oldMax) {\n    return (newMax - newMin) * (value - oldMin) / (oldMax - oldMin) + newMin;\n}\n/**\r\n * Scales a start and end value of an effect based on percent moved and easing function\r\n */ function scaleEffectByProgress(effect, progress) {\n    var value = scaleBetween(typeof effect.easing === \"function\" ? effect.easing(progress) : progress, (effect == null ? void 0 : effect.start) || 0, (effect == null ? void 0 : effect.end) || 0, 0, 1);\n    return {\n        value: value,\n        unit: effect == null ? void 0 : effect.unit\n    };\n}\nvar TRANSFORM_EFFECTS = /*#__PURE__*/ Object.values(ValidCSSEffects).filter(function(v) {\n    return v !== \"opacity\";\n});\nfunction setWillChangeStyles(el, effects) {\n    var keys = Object.keys(effects);\n    var hasOpacity = keys.includes(\"opacity\");\n    var willChange = \"transform\" + (hasOpacity ? \",opacity\" : \"\");\n    el.style.willChange = willChange;\n}\nfunction setElementStyles(effects, progress, el) {\n    if (!el) return;\n    var transform = getTransformStyles(effects, progress);\n    var opacity = getOpacityStyles(effects, progress);\n    el.style.transform = transform;\n    el.style.opacity = opacity;\n}\nfunction getOpacityStyles(effects, progress) {\n    var scaledOpacity = effects[\"opacity\"] && scaleEffectByProgress(effects[\"opacity\"], progress);\n    if (typeof scaledOpacity === \"undefined\" || typeof scaledOpacity.value === \"undefined\" || typeof scaledOpacity.unit === \"undefined\") {\n        return \"\";\n    }\n    var styleStr = \"\" + scaledOpacity.value;\n    return styleStr;\n}\nfunction getTransformStyles(effects, progress) {\n    var transform = TRANSFORM_EFFECTS.reduce(function(acc, key) {\n        var scaledEffect = effects[key] && scaleEffectByProgress(effects[key], progress);\n        if (typeof scaledEffect === \"undefined\" || typeof scaledEffect.value === \"undefined\" || typeof scaledEffect.unit === \"undefined\") {\n            return acc;\n        }\n        var styleStr = key + \"(\" + scaledEffect.value + scaledEffect.unit + \")\";\n        return acc + styleStr;\n    }, \"\");\n    return transform;\n}\n/**\r\n * Takes a parallax element and removes parallax offset styles.\r\n * @param {object} element\r\n */ function resetStyles(element) {\n    var el = element.el;\n    if (!el) return;\n    el.style.transform = \"\";\n    el.style.opacity = \"\";\n}\nfunction createLimitsForRelativeElements(rect, view, scroll, shouldAlwaysCompleteAnimation) {\n    var startY = rect.top - view.height;\n    var startX = rect.left - view.width;\n    var endY = rect.bottom;\n    var endX = rect.right; // add scroll\n    startX += scroll.x;\n    endX += scroll.x;\n    startY += scroll.y;\n    endY += scroll.y;\n    if (shouldAlwaysCompleteAnimation) {\n        if (scroll.y + rect.top < view.height) {\n            startY = 0;\n        }\n        if (scroll.x + rect.left < view.width) {\n            startX = 0;\n        }\n        if (endY > view.scrollHeight - view.height) {\n            endY = view.scrollHeight - view.height;\n        }\n        if (endX > view.scrollWidth - view.width) {\n            endX = view.scrollWidth - view.width;\n        }\n    }\n    var limits = new Limits({\n        startX: startX,\n        startY: startY,\n        endX: endX,\n        endY: endY\n    });\n    return limits;\n}\nfunction getTranslateScalar(startTranslatePx, endTranslatePx, totalDist) {\n    var slow = endTranslatePx > startTranslatePx; // calculating necessary scale to increase translations\n    var totalAbsOff = (Math.abs(startTranslatePx) + Math.abs(endTranslatePx)) * (slow ? -1 : 1);\n    var totalDistTrue = totalDist + totalAbsOff; // Determine multiple to scale by, only values greater than 1\n    var scale = Math.max(totalDist / totalDistTrue, 1);\n    return scale;\n}\n/**\r\n * Return the start and end pixel values for an elements translations\r\n */ function getStartEndValueInPx(translate, elementSize) {\n    var start = translate.start, end = translate.end, unit = translate.unit;\n    if (unit === \"%\") {\n        var scale = elementSize / 100;\n        start = start * scale;\n        end = end * scale;\n    }\n    if (unit === \"vw\") {\n        var startScale = start / 100;\n        var endScale = end / 100;\n        start = window.innerWidth * startScale;\n        end = window.innerWidth * endScale;\n    }\n    if (unit === \"vh\") {\n        var _startScale = start / 100;\n        var _endScale = end / 100;\n        start = window.innerHeight * _startScale;\n        end = window.innerHeight * _endScale;\n    }\n    return {\n        start: start,\n        end: end\n    };\n}\nvar DEFAULT_VALUE = {\n    start: 0,\n    end: 0,\n    unit: \"\"\n};\nfunction createLimitsWithTranslationsForRelativeElements(rect, view, effects, scroll, scrollAxis, shouldAlwaysCompleteAnimation) {\n    // get start and end accounting for percent effects\n    var translateX = effects.translateX || DEFAULT_VALUE;\n    var translateY = effects.translateY || DEFAULT_VALUE;\n    var _getStartEndValueInPx = getStartEndValueInPx(translateX, rect.width), startTranslateXPx = _getStartEndValueInPx.start, endTranslateXPx = _getStartEndValueInPx.end;\n    var _getStartEndValueInPx2 = getStartEndValueInPx(translateY, rect.height), startTranslateYPx = _getStartEndValueInPx2.start, endTranslateYPx = _getStartEndValueInPx2.end; // default starting values\n    var startY = rect.top - view.height;\n    var startX = rect.left - view.width;\n    var endY = rect.bottom;\n    var endX = rect.right;\n    var startMultiplierY = 1;\n    var endMultiplierY = 1;\n    if (scrollAxis === ScrollAxis.vertical) {\n        startMultiplierY = getTranslateScalar(startTranslateYPx, endTranslateYPx, view.height + rect.height);\n        endMultiplierY = startMultiplierY;\n    }\n    var startMultiplierX = 1;\n    var endMultiplierX = 1;\n    if (scrollAxis === ScrollAxis.horizontal) {\n        startMultiplierX = getTranslateScalar(startTranslateXPx, endTranslateXPx, view.width + rect.width);\n        endMultiplierX = startMultiplierX;\n    } // Apply the scale to initial values\n    if (startTranslateYPx < 0) {\n        startY = startY + startTranslateYPx * startMultiplierY;\n    }\n    if (endTranslateYPx > 0) {\n        endY = endY + endTranslateYPx * endMultiplierY;\n    }\n    if (startTranslateXPx < 0) {\n        startX = startX + startTranslateXPx * startMultiplierX;\n    }\n    if (endTranslateXPx > 0) {\n        endX = endX + endTranslateXPx * endMultiplierX;\n    } // add scroll\n    startX += scroll.x;\n    endX += scroll.x;\n    startY += scroll.y;\n    endY += scroll.y; // NOTE: please refactor and isolate this :(\n    if (shouldAlwaysCompleteAnimation) {\n        var topBeginsInView = scroll.y + rect.top < view.height;\n        var leftBeginsInView = scroll.x + rect.left < view.width;\n        var bottomEndsInView = scroll.y + rect.bottom > view.scrollHeight - view.height;\n        var rightEndsInView = scroll.x + rect.right > view.scrollWidth - view.height;\n        if (topBeginsInView && bottomEndsInView) {\n            startMultiplierY = 1;\n            endMultiplierY = 1;\n            startY = 0;\n            endY = view.scrollHeight - view.height;\n        }\n        if (leftBeginsInView && rightEndsInView) {\n            startMultiplierX = 1;\n            endMultiplierX = 1;\n            startX = 0;\n            endX = view.scrollWidth - view.width;\n        }\n        if (!topBeginsInView && bottomEndsInView) {\n            startY = rect.top - view.height + scroll.y;\n            endY = view.scrollHeight - view.height;\n            var totalDist = endY - startY;\n            startMultiplierY = getTranslateScalar(startTranslateYPx, endTranslateYPx, totalDist);\n            endMultiplierY = 1;\n            if (startTranslateYPx < 0) {\n                startY = startY + startTranslateYPx * startMultiplierY;\n            }\n        }\n        if (!leftBeginsInView && rightEndsInView) {\n            startX = rect.left - view.width + scroll.x;\n            endX = view.scrollWidth - view.width;\n            var _totalDist = endX - startX;\n            startMultiplierX = getTranslateScalar(startTranslateXPx, endTranslateXPx, _totalDist);\n            endMultiplierX = 1;\n            if (startTranslateXPx < 0) {\n                startX = startX + startTranslateXPx * startMultiplierX;\n            }\n        }\n        if (topBeginsInView && !bottomEndsInView) {\n            startY = 0;\n            endY = rect.bottom + scroll.y;\n            var _totalDist2 = endY - startY;\n            startMultiplierY = 1;\n            endMultiplierY = getTranslateScalar(startTranslateYPx, endTranslateYPx, _totalDist2);\n            if (endTranslateYPx > 0) {\n                endY = endY + endTranslateYPx * endMultiplierY;\n            }\n        }\n        if (leftBeginsInView && !rightEndsInView) {\n            startX = 0;\n            endX = rect.right + scroll.x;\n            var _totalDist3 = endX - startX;\n            startMultiplierX = 1;\n            endMultiplierX = getTranslateScalar(startTranslateXPx, endTranslateXPx, _totalDist3);\n            if (endTranslateXPx > 0) {\n                endX = endX + endTranslateXPx * endMultiplierX;\n            }\n        }\n    }\n    var limits = new Limits({\n        startX: startX,\n        startY: startY,\n        endX: endX,\n        endY: endY,\n        startMultiplierX: startMultiplierX,\n        endMultiplierX: endMultiplierX,\n        startMultiplierY: startMultiplierY,\n        endMultiplierY: endMultiplierY\n    });\n    return limits;\n}\nfunction scaleTranslateEffectsForSlowerScroll(effects, limits) {\n    var effectsCopy = _extends({}, effects);\n    if (effectsCopy.translateX) {\n        effectsCopy.translateX = _extends({}, effects.translateX, {\n            start: effectsCopy.translateX.start * limits.startMultiplierX,\n            end: effectsCopy.translateX.end * limits.endMultiplierX\n        });\n    }\n    if (effectsCopy.translateY) {\n        effectsCopy.translateY = _extends({}, effects.translateY, {\n            start: effectsCopy.translateY.start * limits.startMultiplierY,\n            end: effectsCopy.translateY.end * limits.endMultiplierY\n        });\n    }\n    return effectsCopy;\n}\nfunction getShouldScaleTranslateEffects(props, effects, scrollAxis) {\n    if (props.rootMargin || props.targetElement || props.shouldDisableScalingTranslations) {\n        return false;\n    }\n    if (!!effects.translateX && scrollAxis === ScrollAxis.horizontal || !!effects.translateY && scrollAxis === ScrollAxis.vertical) {\n        return true;\n    }\n    return false;\n}\nvar clamp = function clamp(num, min, max) {\n    return Math.min(Math.max(num, min), max);\n};\nvar Element = /*#__PURE__*/ function() {\n    function Element(options) {\n        this.el = options.el;\n        this.props = options.props;\n        this.scrollAxis = options.scrollAxis;\n        this.disabledParallaxController = options.disabledParallaxController || false;\n        this.id = createId();\n        this.effects = parseElementTransitionEffects(this.props, this.scrollAxis);\n        this.isInView = null;\n        this.progress = 0;\n        this._setElementEasing(options.props.easing);\n        setWillChangeStyles(options.el, this.effects);\n    }\n    var _proto = Element.prototype;\n    _proto.updateProps = function updateProps(nextProps) {\n        this.props = _extends({}, this.props, nextProps);\n        this.effects = parseElementTransitionEffects(nextProps, this.scrollAxis);\n        this._setElementEasing(nextProps.easing);\n        return this;\n    };\n    _proto.setCachedAttributes = function setCachedAttributes(view, scroll) {\n        // NOTE: Must reset styles before getting the rect, as it might impact the natural position\n        resetStyles(this);\n        this.rect = new Rect({\n            el: this.props.targetElement || this.el,\n            rootMargin: this.props.rootMargin,\n            view: view\n        });\n        var shouldScaleTranslateEffects = getShouldScaleTranslateEffects(this.props, this.effects, this.scrollAxis);\n        if (typeof this.props.startScroll === \"number\" && typeof this.props.endScroll === \"number\") {\n            this.limits = new Limits({\n                startX: this.props.startScroll,\n                startY: this.props.startScroll,\n                endX: this.props.endScroll,\n                endY: this.props.endScroll\n            }); // Undo the reset -- place it back at current position with styles\n            this._setElementStyles();\n            return this;\n        }\n        if (shouldScaleTranslateEffects) {\n            this.limits = createLimitsWithTranslationsForRelativeElements(this.rect, view, this.effects, scroll, this.scrollAxis, this.props.shouldAlwaysCompleteAnimation);\n            this.scaledEffects = scaleTranslateEffectsForSlowerScroll(this.effects, this.limits);\n        } else {\n            this.limits = createLimitsForRelativeElements(this.rect, view, scroll, this.props.shouldAlwaysCompleteAnimation);\n        } // Undo the reset -- place it back at current position with styles\n        this._setElementStyles();\n        return this;\n    };\n    _proto._updateElementIsInView = function _updateElementIsInView(nextIsInView) {\n        // NOTE: Check if this is the first change to make sure onExit isn't called\n        var isFirstChange = this.isInView === null;\n        if (nextIsInView !== this.isInView) {\n            if (nextIsInView) {\n                this.props.onEnter && this.props.onEnter(this);\n            } else if (!isFirstChange) {\n                this._setFinalProgress();\n                this._setElementStyles();\n                this.props.onExit && this.props.onExit(this);\n            }\n        }\n        this.isInView = nextIsInView;\n    };\n    _proto._setFinalProgress = function _setFinalProgress() {\n        var finalProgress = clamp(Math.round(this.progress), 0, 1);\n        this._updateElementProgress(finalProgress);\n    };\n    _proto._setElementStyles = function _setElementStyles() {\n        if (this.props.disabled || this.disabledParallaxController) return;\n        var effects = this.scaledEffects || this.effects;\n        setElementStyles(effects, this.progress, this.el);\n    };\n    _proto._updateElementProgress = function _updateElementProgress(nextProgress) {\n        this.progress = nextProgress;\n        this.props.onProgressChange && this.props.onProgressChange(this.progress);\n        this.props.onChange && this.props.onChange(this);\n    };\n    _proto._setElementEasing = function _setElementEasing(easing) {\n        this.easing = createEasingFunction(easing);\n    };\n    _proto.updateElementOptions = function updateElementOptions(options) {\n        this.scrollAxis = options.scrollAxis;\n        this.disabledParallaxController = options.disabledParallaxController || false;\n    };\n    _proto.updatePosition = function updatePosition(scroll) {\n        if (!this.limits) return this;\n        var isVertical = this.scrollAxis === ScrollAxis.vertical;\n        var isFirstChange = this.isInView === null; // based on scroll axis\n        var start = isVertical ? this.limits.startY : this.limits.startX;\n        var end = isVertical ? this.limits.endY : this.limits.endX;\n        var total = isVertical ? this.limits.totalY : this.limits.totalX;\n        var s = isVertical ? scroll.y : scroll.x; // check if in view\n        var nextIsInView = isElementInView(start, end, s);\n        this._updateElementIsInView(nextIsInView); // set the progress if in view or this is the first change\n        if (nextIsInView) {\n            var nextProgress = getProgressAmount(start, total, s, this.easing);\n            this._updateElementProgress(nextProgress);\n            this._setElementStyles();\n        } else if (isFirstChange) {\n            // NOTE: this._updateElementProgress -- dont use this because it will trigger onChange\n            this.progress = clamp(Math.round(getProgressAmount(start, total, s, this.easing)), 0, 1);\n            this._setElementStyles();\n        }\n        return this;\n    };\n    return Element;\n}();\nvar View = /*#__PURE__*/ function() {\n    function View(config) {\n        this.scrollContainer = config.scrollContainer;\n        this.width = config.width;\n        this.height = config.height;\n        this.scrollHeight = config.scrollHeight;\n        this.scrollWidth = config.scrollWidth;\n    }\n    var _proto = View.prototype;\n    _proto.hasChanged = function hasChanged(params) {\n        if (params.width !== this.width || params.height !== this.height || params.scrollWidth !== this.scrollWidth || params.scrollHeight !== this.scrollHeight) {\n            return true;\n        }\n        return false;\n    };\n    _proto.setSize = function setSize(params) {\n        this.width = params.width;\n        this.height = params.height;\n        this.scrollHeight = params.scrollHeight;\n        this.scrollWidth = params.scrollWidth;\n        return this;\n    };\n    return View;\n}();\nvar Scroll = /*#__PURE__*/ function() {\n    function Scroll(x, y) {\n        this.x = x;\n        this.y = y;\n        this.dx = 0;\n        this.dy = 0;\n    }\n    var _proto = Scroll.prototype;\n    _proto.setScroll = function setScroll(x, y) {\n        this.dx = x - this.x;\n        this.dy = y - this.y;\n        this.x = x;\n        this.y = y;\n        return this;\n    };\n    return Scroll;\n}();\nfunction testForPassiveScroll() {\n    var supportsPassiveOption = false;\n    try {\n        var opts = Object.defineProperty({}, \"passive\", {\n            get: function get() {\n                supportsPassiveOption = true;\n                return true;\n            }\n        }); // @ts-expect-error\n        window.addEventListener(\"test\", null, opts); // @ts-expect-error\n        window.removeEventListener(\"test\", null, opts);\n    } catch (e) {}\n    return supportsPassiveOption;\n}\n/**\r\n * -------------------------------------------------------\r\n * Parallax Controller\r\n * -------------------------------------------------------\r\n *\r\n * The global controller for setting up and managing a scroll view of elements.\r\n *\r\n */ var ParallaxController = /*#__PURE__*/ function() {\n    function ParallaxController(_ref) {\n        var _ref$scrollAxis = _ref.scrollAxis, scrollAxis = _ref$scrollAxis === void 0 ? ScrollAxis.vertical : _ref$scrollAxis, scrollContainer = _ref.scrollContainer, _ref$disabled = _ref.disabled, disabled = _ref$disabled === void 0 ? false : _ref$disabled;\n        this.disabled = disabled;\n        this.scrollAxis = scrollAxis; // All parallax elements to be updated\n        this.elements = [];\n        this._hasScrollContainer = !!scrollContainer;\n        this.viewEl = scrollContainer != null ? scrollContainer : window; // Scroll and View\n        var _this$_getScrollPosit = this._getScrollPosition(), x = _this$_getScrollPosit[0], y = _this$_getScrollPosit[1];\n        this.scroll = new Scroll(x, y);\n        this.view = new View({\n            width: 0,\n            height: 0,\n            scrollWidth: 0,\n            scrollHeight: 0,\n            scrollContainer: this._hasScrollContainer ? scrollContainer : undefined\n        }); // Ticking\n        this._ticking = false; // Passive support\n        this._supportsPassive = testForPassiveScroll(); // Bind methods to class\n        this._bindAllMethods(); // If this is initialized disabled, don't do anything below.\n        if (this.disabled) return;\n        this._addListeners(this.viewEl);\n        this._addResizeObserver();\n        this._setViewSize();\n    }\n    /**\r\n   * Static method to instantiate the ParallaxController.\r\n   * @returns {Class} ParallaxController\r\n   */ ParallaxController.init = function init(options) {\n        var hasWindow = \"undefined\" !== \"undefined\";\n        if (!hasWindow) {\n            throw new Error(\"Looks like ParallaxController.init() was called on the server. This method must be called on the client.\");\n        }\n        return new ParallaxController(options);\n    };\n    var _proto = ParallaxController.prototype;\n    _proto._bindAllMethods = function _bindAllMethods() {\n        var _this = this;\n        [\n            \"_addListeners\",\n            \"_removeListeners\",\n            \"_getScrollPosition\",\n            \"_handleScroll\",\n            \"_handleUpdateCache\",\n            \"_updateAllElements\",\n            \"_updateElementPosition\",\n            \"_setViewSize\",\n            \"_addResizeObserver\",\n            \"_checkIfViewHasChanged\",\n            \"_getViewParams\",\n            \"getElements\",\n            \"createElement\",\n            \"removeElementById\",\n            \"resetElementStyles\",\n            \"updateElementPropsById\",\n            \"update\",\n            \"updateScrollContainer\",\n            \"destroy\"\n        ].forEach(function(method) {\n            // @ts-expect-error\n            _this[method] = _this[method].bind(_this);\n        });\n    };\n    _proto._addListeners = function _addListeners(el) {\n        el.addEventListener(\"scroll\", this._handleScroll, this._supportsPassive ? {\n            passive: true\n        } : false);\n        window.addEventListener(\"resize\", this._handleUpdateCache, false);\n        window.addEventListener(\"blur\", this._handleUpdateCache, false);\n        window.addEventListener(\"focus\", this._handleUpdateCache, false);\n        window.addEventListener(\"load\", this._handleUpdateCache, false);\n    };\n    _proto._removeListeners = function _removeListeners(el) {\n        var _this$_resizeObserver;\n        el.removeEventListener(\"scroll\", this._handleScroll, false);\n        window.removeEventListener(\"resize\", this._handleUpdateCache, false);\n        window.removeEventListener(\"blur\", this._handleUpdateCache, false);\n        window.removeEventListener(\"focus\", this._handleUpdateCache, false);\n        window.removeEventListener(\"load\", this._handleUpdateCache, false);\n        (_this$_resizeObserver = this._resizeObserver) == null ? void 0 : _this$_resizeObserver.disconnect();\n    };\n    _proto._addResizeObserver = function _addResizeObserver() {\n        var _this2 = this;\n        try {\n            var observedEl = this._hasScrollContainer ? this.viewEl : document.documentElement;\n            this._resizeObserver = new ResizeObserver(function() {\n                return _this2.update();\n            });\n            this._resizeObserver.observe(observedEl);\n        } catch (e) {\n            console.warn(\"Failed to create the resize observer in the ParallaxContoller\");\n        }\n    };\n    _proto._getScrollPosition = function _getScrollPosition() {\n        // Save current scroll\n        // Supports IE 9 and up.\n        var nx = this._hasScrollContainer ? this.viewEl.scrollLeft : window.pageXOffset;\n        var ny = this._hasScrollContainer ? this.viewEl.scrollTop : window.pageYOffset;\n        return [\n            nx,\n            ny\n        ];\n    } /**\r\n   * Window scroll handler sets scroll position\r\n   * and then calls '_updateAllElements()'.\r\n   */ ;\n    _proto._handleScroll = function _handleScroll() {\n        var _this$elements;\n        var _this$_getScrollPosit2 = this._getScrollPosition(), nx = _this$_getScrollPosit2[0], ny = _this$_getScrollPosit2[1];\n        this.scroll.setScroll(nx, ny); // Only called if the last animation request has been\n        // completed and there are parallax elements to update\n        if (!this._ticking && ((_this$elements = this.elements) == null ? void 0 : _this$elements.length) > 0) {\n            this._ticking = true; // @ts-ignore\n            window.requestAnimationFrame(this._updateAllElements);\n        }\n    } /**\r\n   * Window resize handler. Sets the new window inner height\r\n   * then updates parallax element attributes and positions.\r\n   */ ;\n    _proto._handleUpdateCache = function _handleUpdateCache() {\n        this._setViewSize();\n        this._updateAllElements({\n            updateCache: true\n        });\n    } /**\r\n   * Update element positions.\r\n   * Determines if the element is in view based on the cached\r\n   * attributes, if so set the elements parallax styles.\r\n   */ ;\n    _proto._updateAllElements = function _updateAllElements(_temp) {\n        var _this3 = this;\n        var _ref2 = _temp === void 0 ? {} : _temp, updateCache = _ref2.updateCache;\n        if (this.elements) {\n            this.elements.forEach(function(element) {\n                if (updateCache) {\n                    element.setCachedAttributes(_this3.view, _this3.scroll);\n                }\n                _this3._updateElementPosition(element);\n            });\n        } // reset ticking so more animations can be called\n        this._ticking = false;\n    } /**\r\n   * Update element positions.\r\n   * Determines if the element is in view based on the cached\r\n   * attributes, if so set the elements parallax styles.\r\n   */ ;\n    _proto._updateElementPosition = function _updateElementPosition(element) {\n        if (element.props.disabled || this.disabled) return;\n        element.updatePosition(this.scroll);\n    } /**\r\n   * Gets the params to set in the View from the scroll container or the window\r\n   */ ;\n    _proto._getViewParams = function _getViewParams() {\n        if (this._hasScrollContainer) {\n            // @ts-expect-error\n            var _width = this.viewEl.offsetWidth; // @ts-expect-error\n            var _height = this.viewEl.offsetHeight; // @ts-expect-error\n            var _scrollHeight = this.viewEl.scrollHeight; // @ts-expect-error\n            var _scrollWidth = this.viewEl.scrollWidth;\n            return this.view.setSize({\n                width: _width,\n                height: _height,\n                scrollHeight: _scrollHeight,\n                scrollWidth: _scrollWidth\n            });\n        }\n        var html = document.documentElement;\n        var width = window.innerWidth || html.clientWidth;\n        var height = window.innerHeight || html.clientHeight;\n        var scrollHeight = html.scrollHeight;\n        var scrollWidth = html.scrollWidth;\n        return {\n            width: width,\n            height: height,\n            scrollHeight: scrollHeight,\n            scrollWidth: scrollWidth\n        };\n    } /**\r\n   * Cache the view attributes\r\n   */ ;\n    _proto._setViewSize = function _setViewSize() {\n        return this.view.setSize(this._getViewParams());\n    } /**\r\n   * Checks if any of the cached attributes of the view have changed.\r\n   * @returns boolean\r\n   */ ;\n    _proto._checkIfViewHasChanged = function _checkIfViewHasChanged() {\n        return this.view.hasChanged(this._getViewParams());\n    } /**\r\n   * Returns all the parallax elements in the controller\r\n   */ ;\n    _proto.getElements = function getElements() {\n        return this.elements;\n    } /**\r\n   * Creates and returns new parallax element with provided options to be managed by the controller.\r\n   */ ;\n    _proto.createElement = function createElement(options) {\n        var newElement = new Element(_extends({}, options, {\n            scrollAxis: this.scrollAxis,\n            disabledParallaxController: this.disabled\n        }));\n        newElement.setCachedAttributes(this.view, this.scroll);\n        this.elements = this.elements ? [].concat(this.elements, [\n            newElement\n        ]) : [\n            newElement\n        ];\n        this._updateElementPosition(newElement); // NOTE: This checks if the view has changed then update the controller and all elements if it has\n        // This shouldn't always be necessary with a resize observer watching the view element\n        // but there seems to be cases where the resize observer does not catch and update.\n        if (this._checkIfViewHasChanged()) {\n            this.update();\n        }\n        return newElement;\n    } /**\r\n   * Remove an element by id\r\n   */ ;\n    _proto.removeElementById = function removeElementById(id) {\n        if (!this.elements) return;\n        this.elements = this.elements.filter(function(el) {\n            return el.id !== id;\n        });\n    } /**\r\n   * Updates an existing parallax element object with new options.\r\n   */ ;\n    _proto.updateElementPropsById = function updateElementPropsById(id, props) {\n        if (this.elements) {\n            this.elements = this.elements.map(function(el) {\n                if (el.id === id) {\n                    return el.updateProps(props);\n                }\n                return el;\n            });\n        }\n        this.update();\n    } /**\r\n   * Remove a target elements parallax styles\r\n   */ ;\n    _proto.resetElementStyles = function resetElementStyles(element) {\n        resetStyles(element);\n    } /**\r\n   * Updates all cached attributes on parallax elements.\r\n   */ ;\n    _proto.update = function update() {\n        // Save the latest scroll position because window.scroll\n        // may be called and the handle scroll event may not be called.\n        var _this$_getScrollPosit3 = this._getScrollPosition(), nx = _this$_getScrollPosit3[0], ny = _this$_getScrollPosit3[1];\n        this.scroll.setScroll(nx, ny);\n        this._setViewSize();\n        this._updateAllElements({\n            updateCache: true\n        });\n    } /**\r\n   * Updates the scroll container of the parallax controller\r\n   */ ;\n    _proto.updateScrollContainer = function updateScrollContainer(el) {\n        // remove existing listeners with current el first\n        this._removeListeners(this.viewEl);\n        this.viewEl = el;\n        this._hasScrollContainer = !!el;\n        this.view = new View({\n            width: 0,\n            height: 0,\n            scrollWidth: 0,\n            scrollHeight: 0,\n            scrollContainer: el\n        });\n        this._setViewSize();\n        this._addListeners(this.viewEl);\n        this._updateAllElements({\n            updateCache: true\n        });\n    };\n    _proto.disableParallaxController = function disableParallaxController() {\n        this.disabled = true; // remove listeners\n        this._removeListeners(this.viewEl); // reset all styles\n        if (this.elements) {\n            this.elements.forEach(function(element) {\n                return resetStyles(element);\n            });\n        }\n    };\n    _proto.enableParallaxController = function enableParallaxController() {\n        var _this4 = this;\n        this.disabled = false;\n        if (this.elements) {\n            this.elements.forEach(function(element) {\n                return element.updateElementOptions({\n                    disabledParallaxController: false,\n                    scrollAxis: _this4.scrollAxis\n                });\n            });\n        } // add back listeners\n        this._addListeners(this.viewEl);\n        this._addResizeObserver();\n        this._setViewSize();\n    } /**\r\n   * Disable all parallax elements\r\n   */ ;\n    _proto.disableAllElements = function disableAllElements() {\n        console.warn(\"deprecated: use disableParallaxController() instead\");\n        if (this.elements) {\n            this.elements = this.elements.map(function(el) {\n                return el.updateProps({\n                    disabled: true\n                });\n            });\n        }\n        this.update();\n    } /**\r\n   * Enable all parallax elements\r\n   */ ;\n    _proto.enableAllElements = function enableAllElements() {\n        console.warn(\"deprecated: use enableParallaxController() instead\");\n        if (this.elements) {\n            this.elements = this.elements.map(function(el) {\n                return el.updateProps({\n                    disabled: false\n                });\n            });\n        }\n        this.update();\n    } /**\r\n   * Removes all listeners and resets all styles on managed elements.\r\n   */ ;\n    _proto.destroy = function destroy() {\n        this._removeListeners(this.viewEl);\n        if (this.elements) {\n            this.elements.forEach(function(element) {\n                return resetStyles(element);\n            });\n        } // @ts-expect-error\n        this.elements = undefined;\n    };\n    return ParallaxController;\n}();\n //# sourceMappingURL=parallax-controller.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/parallax-controller/dist/parallax-controller.esm.js\n");

/***/ })

};
;